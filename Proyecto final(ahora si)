#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>
//#include <algorithm>
//#include <cmath>
using namespace std;

void mostrarTexto(vector<string> &texto);
void justificarTexto(vector<string> &texto, int &limite);
void izquierdaTexto(vector<string> &texto, int &limite);
void derechaTexto(vector<string> &texto, int &limite);
void centrarTexto(vector<string> &texto, int &limite);
void buscarPalabra(vector<string> texto, string &palabra);
int contarPalabra(vector<string> texto, string &palabra);
int reemplazarPalabra(vector<string> &texto, string &palabra, string &reemplazo);
void encriptarTexto(vector<string> &texto);
void desencriptarTexto(vector<string> &texto);
void limpiarTexto(vector<string> &texto);
void limpiarCadena(string &cadena);

int reemplazarPalabra(vector<string> &texto, string &palabra, string &reemplazo){
    int valida;
    string inicio, final;
    for(int i = 0; i < texto.size(); i++){
        limpiarCadena(texto[i]);
        for(int j = 0; j <texto[i].length() - palabra.length(); j++){
            valida = 0;
            for(int k = 0; k < palabra.length(); k++){
                if(toupper(palabra[k]) == toupper(texto[i][j+k]))
                    valida++;
                else
                    break;
            }
            if(valida == palabra.length()) {
                cout<<"Encontrado : "<<endl;
                inicio = string(texto[i].begin(), texto[i].end() - texto[i].length() + j);
                final = string(texto[i].begin() + j + palabra.length(), texto[i].end());
                texto[i] = inicio + reemplazo + final;
            }
            //j += reemplazo.length();
        }
    }
    mostrarTexto(texto);
}


void buscarPalabra(vector<string> texto, string &palabra){
    int valida;
    for(int i = 0; i < texto.size(); i++){
        limpiarCadena(texto[i]);
        for(int j = 0; j <texto[i].length() - palabra.length(); j++){
            valida = 0;
            for(int k = 0; k < palabra.length(); k++){
                if(toupper(palabra[k]) == toupper(texto[i][j+k]))
                    valida++;
                else
                    break;
            }
            if(valida == palabra.length())
        }
    }
    mostrarTexto(texto);
}


int contarPalabra(vector<string> texto, string &palabra){
    int valida, contador = 0;
    for(int i = 0; i < texto.size(); i++){
        limpiarCadena(texto[i]);
        for(int j = 0; j <texto[i].length() - palabra.length(); j++){
            valida = 0;
            for(int k = 0; k < palabra.length(); k++){
                if(toupper(palabra[k]) == toupper(texto[i][j+k]))
                    valida++;
                else
                    break;
            }
            if(valida == palabra.length())
                contador++;
        }
    }
    return contador;
}



//Justificar texto




void izquierdaTexto(vector<string> &texto, int &limite){
    for(int i = 0; i < texto.size(); i++){
        limpiarCadena(texto[i]);
    }
}
void derechaTexto(vector<string> &texto, int &limite){
    string relleno = "";
    for(int i = 0; i < texto.size(); i++){
        limpiarCadena(texto[i]);
        for(int j = 0; j < limite - texto[i].length(); j++){
            relleno += ' ';
        }
        texto[i] = relleno + texto[i];
        relleno = "";
    }
}



// menu 


int main() {
    vector<string> archivo;
    string nombreArchivo;
    string lineaTexto;
    string palabra, palabra2;
    string copia;
    //string archivo = "";
    int tamMax = 0;
    ifstream inFile;
    int opcion;
    cout << "Ingrese el nombre del archivo a leer: "<<endl;
    cin>> nombreArchivo;
    //nombreArchivo = "   ";
    //limpiarCadena(nombreArchivo);
    //cout<<nombreArchivo;
    inFile.open("C:\\Users\\Ricardo\\CLionProjects\\editor\\ejemplo.txt", ios::in);
    if (!inFile) {
        cout << "El archivo no pudo ser encontrado ";
        exit(1);
    }
    while (!inFile.eof()) {
        getline(inFile, lineaTexto);
        //limpiarCadena(lineaTexto);
        tamMax = max(tamMax, int(lineaTexto.length()));
        archivo.push_back(lineaTexto);
    }
    limpiarTexto(archivo);
    mostrarTexto(archivo);
    //archivo = string(archivo.begin(), archivo.end()-1);
    cout << "Menu\n"
            "1. Leer archivo\n"
            "2. Guardar archivo. Debe grabar un archivo de texto con el formato indicado por ejemplo justificado.\n"
            "3. Debe justificar\n"
            "4. Alinear el texto a la izquierda\n"
            "5. Alinear el texto a la derecha\n"
            "6. Centrar el texto\n"
            "7. Buscar una palabra\n"
            "8. Reemplazar una palabra\n"
            "9. Contar la cantidad de veces que aparece una palabra\n"
            "10. Encriptar el archivo\n"
            "11. Desencriptar el archivo\n";
    cin>>opcion;
    switch(opcion) {
        case 3:
            justificarTexto(archivo, tamMax);
            break;
        case 4:
            izquierdaTexto(archivo, tamMax);
            break;
        case 5:
            derechaTexto(archivo, tamMax);
            break;
        case 6:
            centrarTexto(archivo, tamMax);
            break;
        case 7:
            cin >> palabra;
            buscarPalabra(archivo, palabra);
            break;
        case 8:
            cout<<"Ingrese la palabra a reemplazar:"<<endl;
            cin>>palabra;
            cout<<"Ingrese su reemplazo:"<<endl;
            cin>>palabra2;
            reemplazarPalabra(archivo, palabra, palabra2);
            break;
        case 9:
            cout<<"Ingrese la palabra:"<<endl;
            cin>>palabra;
            cout<<"La palabra tiene "<<contarPalabra(archivo, palabra)<<" coincidencias en el texto"<<endl;
            break;
        case 10:
            encriptarTexto(archivo);
            break;
        case 11:
            desencriptarTexto(archivo);
            break;

        /*case 5:
            cin >> palabra;
            buscarPalabra(archivo, palabra);
            break;
            case 6:
                cin>>palabra;
                reemplazarPalabra(archivo, palabra);
                break;
            case 7:
                cin>>palabra;
                contarPalabra(archivo, palabra);
                break;
            case 8:
                cin>>palabra;
                encriparTexto(archivo);
                break;*/
    }

    mostrarTexto(archivo);
    //diccionarioTexto(archivo);
    //desencriptarTexto(archivo);
    //mostrarTexto(archivo);
}

